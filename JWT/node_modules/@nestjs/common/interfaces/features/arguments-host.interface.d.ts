export type ContextType = 'http' | 'ws' | 'rpc';
/**
 * Methods to obtain request and response objects.
 *
 * @publicApi
 */
export interface HttpArgumentsHost { //HttpArgumentsHost proporciona métodos para acceder a los objetos específicos de una solicitud HTTP, como request (req), response (res) y next (función middleware)
    /**
     * Returns the in-flight `request` object.
     */
    getRequest<T = any>(): T; //getRequest devuelve el objeto de solicitud HTTP (req) que contiene detalles sobre la solicitud entrante, como headers, body, params, user (si autenticado), etc.
    /**
     * Returns the in-flight `response` object.
     */
    getResponse<T = any>(): T;
    getNext<T = any>(): T;
}
/**
 * Methods to obtain WebSocket data and client objects.
 *
 * @publicApi
 */
export interface WsArgumentsHost {
    /**
     * Returns the data object.
     */
    getData<T = any>(): T;
    /**
     * Returns the client object.
     */
    getClient<T = any>(): T;
    /**
     * Returns the pattern for the event
     */
    getPattern(): string;
}
/**
 * Methods to obtain RPC data object.
 *
 * @publicApi
 */
export interface RpcArgumentsHost {
    /**
     * Returns the data object.
     */
    getData<T = any>(): T;
    /**
     * Returns the context object.
     */
    getContext<T = any>(): T;
}
/**
 * Provides methods for retrieving the arguments being passed to a handler.
 * Allows choosing the appropriate execution context (e.g., Http, RPC, or
 * WebSockets) to retrieve the arguments from.
 *
 * @publicApi
 */
export interface ArgumentsHost {
    /**
     * Returns the array of arguments being passed to the handler.
     */
    getArgs<T extends Array<any> = any[]>(): T;
    /**
     * Returns a particular argument by index.
     * @param index index of argument to retrieve
     */
    getArgByIndex<T = any>(index: number): T;
    /**
     * Switch context to RPC.
     * @returns interface with methods to retrieve RPC arguments
     */
    switchToRpc(): RpcArgumentsHost;
    /**
     * Switch context to HTTP.
     * @returns interface with methods to retrieve HTTP arguments
     */
    switchToHttp(): HttpArgumentsHost; //switchToHttp devuelve un objeto que permite acceder a los argumentos específicos de una solicitud HTTP (request, response, next)
    /**
     * Switch context to WebSockets.
     * @returns interface with methods to retrieve WebSockets arguments
     */
    switchToWs(): WsArgumentsHost;
    /**
     * Returns the current execution context type (string)
     */
    getType<TContext extends string = ContextType>(): TContext;

    //la liena completa switchToHttp().getRequest() es un encadenamiento de métodos que primero cambia el contexto de ejecución al contexto HTTP usando switchToHttp(), y luego obtiene el objeto de solicitud HTTP (req) usando getRequest().
    //cambiamos el contexto a HTTP y obtenemos el objeto request
    //el primer método define el contexto, es decir se define que tipo de solicitud estamos manejando (HTTP en este caso)
    //el segundo método extrae el objeto request de ese contexto HTTP, que contiene detalles sobre la solicitud entrante, como headers, body, params, user (si autenticado), etc.
}   //switchToHttp devuelve HttpArgumentsHost que tiene el método getRequest para obtener el objeto req
   //en resumen a través del encadenamiento switchToHttp().getRequest() obtenemos el objeto req de una solicitud HTTP entrante, el primero define el contexto y el segundo extrae el objeto request de ese contexto